    ;main function initialization
MAIN PROC


    ;data initialization
	MOV AX, @DATA
	MOV DS, AX


    ;function stack movement for recursive calling
	PUSH BP
	MOV BP, SP


    ;var declaration i
	SUB SP, 2


    ;CONST_INT: 0
	XOR AX, AX
	MOV [BP - 4], AX


    ;i = 0
	MOV AX, [BP - 4]
	MOV [BP - 2], AX


    ;for loop start
	__lebel_forLoopStart_0:


    ;CONST_INT: 5
	MOV AX, 5
	MOV [BP - 4], AX


    ;i<5
	MOV AX, [BP - 2]
	MOV BX, [BP - 4]
	CMP AX, BX
	JL __lebel0
	MOV AX, 0
	MOV [BP - 6], AX
	JMP __lebel1
	__lebel0:
	MOV AX, 1
	MOV [BP - 6], AX
	__lebel1:


    ;looping condition check
	XOR AX, AX
	CMP AX, [BP - 6]
	JE __lebel_forLoopEnd_1
	JMP __lebel_forLoopStatement_2
	__lebel_forLoopChange_3:


    ;i++
	MOV AX, [BP - 2]
	MOV [BP - 4], AX
	INC [BP - 2]


    ;looping variable change
	JMP __lebel_forLoopStart_0
	__lebel_forLoopStatement_2:


    ;array[expression]
	MOV SI, x1
	MOV AX, [BP - 2]
	SHL AX, 1
	ADD SI, AX
	MOV AX, [SI]
	MOV [BP - 6], AX
	MOV [BP - 8], SI


    ;input procedure
	SUB SP, 10
	CALL INPUT
	MOV [BP - 10], BX
	ADD SP, 10


    ;x[i] = INPUT()
	MOV AX, [BP - 10]
	MOV SI, [BP - 8]
	MOV [SI], AX


    ;looping statement finished
	JMP __lebel_forLoopChange_3
	__lebel_forLoopEnd_1:


    ;CONST_INT: 0
	XOR AX, AX
	MOV [BP - 4], AX


    ;i = 0
	MOV AX, [BP - 4]
	MOV [BP - 2], AX


    ;for loop start
	__lebel_forLoopStart_4:


    ;CONST_INT: 5
	MOV AX, 5
	MOV [BP - 4], AX


    ;i<5
	MOV AX, [BP - 2]
	MOV BX, [BP - 4]
	CMP AX, BX
	JL __lebel2
	MOV AX, 0
	MOV [BP - 6], AX
	JMP __lebel3
	__lebel2:
	MOV AX, 1
	MOV [BP - 6], AX
	__lebel3:


    ;looping condition check
	XOR AX, AX
	CMP AX, [BP - 6]
	JE __lebel_forLoopEnd_5
	JMP __lebel_forLoopStatement_6
	__lebel_forLoopChange_7:


    ;i++
	MOV AX, [BP - 2]
	MOV [BP - 4], AX
	INC [BP - 2]


    ;looping variable change
	JMP __lebel_forLoopStart_4
	__lebel_forLoopStatement_6:


    ;array[expression]
	MOV SI, x1
	MOV AX, [BP - 2]
	SHL AX, 1
	ADD SI, AX
	MOV AX, [SI]
	MOV [BP - 6], AX
	MOV [BP - 8], SI


    ;printf(x[i])
	SUB SP, 8
	MOV AX, [BP - 6]
	CALL PRINT
	ADD SP, 8


    ;looping statement finished
	JMP __lebel_forLoopChange_7
	__lebel_forLoopEnd_5:


    ;return label of the function main
	__main_return: 


    ;removing all variable in the scope and storing the return value
	MOV SP, BP
	PUSH DX


    ;stack movement for recursive calling, [if return available then it is in DX]
	MOV SP, BP
	POP BP


    ;interrupt to return to operator
	MOV AH,4CH
	INT 21h


    ;main function ending
MAIN ENDP
END MAIN


    ;code finised
 


